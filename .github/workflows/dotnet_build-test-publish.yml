name: .NET - Build, test and publish reusable workflow

on:
  workflow_call:
    inputs:
      dotnet-version:
        required: false
        type: string
        default: '6.0.x'
        
      include-prerelease:
        required: false
        type: boolean
        default: true
        
      os:
        required: false
        type: string
        default: 'ubuntu-latest'
        
      fetch-depth:
        required: false
        type: number
        default: 50
        
      conventional-commits-publish-conditions:
        required: false
        type: boolean
        default: true
        
      build-with-msbuild:
        required: false
        type: boolean
        default: false
        
      vs-prerelease:
        required: false
        type: boolean
        default: true
        
      run-tests:
        required: false
        type: boolean
        default: true
        
      asset-path:
        required: false
        type: string
        default: ''
        
      asset-name:
        required: false
        type: string
        default: ''
        
      asset-content-type:
        required: false
        type: string
        default: 'application/x-msi'
        
    secrets:
      nuget-key:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.os }}
    name: Build, test and publish
    env:
      DOTNET_NOLOGO: true
    
    steps:
    - name: Getting code
      uses: actions/checkout@v2
      with: 
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Generate build number
      if: ${{ !inputs.conventional-commits-publish-conditions }} ||
          contains(join(github.event.commits.*.message), 'fix:') || 
          contains(join(github.event.commits.*.message), 'feat:') || 
          contains(join(github.event.commits.*.message), 'perf:')
      uses: einaregilsson/build-number@v3
      with:
        token: ${{ secrets.github_token }}  
          
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        include-prerelease: ${{ inputs.include-prerelease }}
      
    - name: Setup MSBuild
      if: ${{ inputs.build-with-msbuild }}
      uses: microsoft/setup-msbuild@v1.0.3
      with:
        vs-prerelease: ${{ inputs.vs-prerelease }}
      
    - name: Generate Release Notes
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        echo 'PACKAGE_RELEASE_NOTES<<EOF' >> $env:GITHUB_ENV
        echo '⭐ Last 10 features:' >> $env:GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=feat >> $env:GITHUB_ENV
        echo '' >> $env:GITHUB_ENV
        echo '🐞 Last 10 bug fixes:' >> $env:GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=fix >> $env:GITHUB_ENV
        echo '' >> $env:GITHUB_ENV
        echo 'EOF' >> $env:GITHUB_ENV
        
    - name: Generate Release Notes
      if: ${{ inputs.os != 'windows-latest' }}
      run: |
        echo 'PACKAGE_RELEASE_NOTES<<EOF' >> $GITHUB_ENV
        echo '⭐ Last 10 features:' >> $GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=feat >> $GITHUB_ENV
        echo '' >> $GITHUB_ENV
        echo '🐞 Last 10 bug fixes:' >> $GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=fix >> $GITHUB_ENV
        echo '' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    
    - name: Build using dotnet
      if: ${{ !inputs.build-with-msbuild }}
      run: dotnet build
        --configuration Release
        --nologo

    - name: Build using MSBuild
      if: ${{ inputs.build-with-msbuild }}
      run: msbuild
        /property:Configuration=Release
        /restore

    - name: Run tests
      if: ${{ inputs.run-tests }}
      run: dotnet test
        --configuration Release
        --nologo
        
    - name: Publish to NuGet
      if: ${{ secrets.nuget-key != '' }} &&
          ( ${{ !inputs.conventional-commits-publish-conditions }} ||
          contains(join(github.event.commits.*.message), 'fix:') || 
          contains(join(github.event.commits.*.message), 'feat:') || 
          contains(join(github.event.commits.*.message), 'perf:'))
      run: dotnet nuget push
        src\**.nupkg
        --api-key ${{ secrets.nuget-key }}
        --source https://api.nuget.org/v3/index.json
        --skip-duplicate
        
    - name: Create Release
      if: ${{ inputs.asset-path != '' }} &&
          ( ${{ !inputs.conventional-commits-publish-conditions }} ||
          contains(join(github.event.commits.*.message), 'fix:') || 
          contains(join(github.event.commits.*.message), 'feat:') || 
          contains(join(github.event.commits.*.message), 'perf:'))
      id: create_release
      uses: zendesk/action-create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: ${{ env.PACKAGE_RELEASE_NOTES }}

    - name: Upload Asset
      if: ${{ inputs.asset-path != '' }} &&
          ( ${{ !inputs.conventional-commits-publish-conditions }} ||
          contains(join(github.event.commits.*.message), 'fix:') || 
          contains(join(github.event.commits.*.message), 'feat:') || 
          contains(join(github.event.commits.*.message), 'perf:'))
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.asset-path }}
        asset_name: ${{ inputs.asset-name }}
        asset_content_type: ${{ inputs.asset-content-type }}
