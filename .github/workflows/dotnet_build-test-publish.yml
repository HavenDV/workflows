name: .NET - Build, test and publish reusable workflow

on:
  workflow_call:
    inputs:
      os:
        required: false
        type: string
        default: ubuntu-latest

      dotnet-version:
        required: false
        type: string
        default: 6.0.x
        
      generate-build-number:
        required: false
        type: boolean
        default: true
        
      additional-dotnet-version:
        required: false
        type: string
        default: ''
        
      dotnet-quality:
        required: false
        type: string
        default: 'preview'
        
      workloads:
        required: false
        type: string
        default: ''
        
      windows-sdk-version:
        required: false
        type: string
        default: ''
        
      windows-sdk-version2:
        required: false
        type: string
        default: ''
        
      windows-sdk-version3:
        required: false
        type: string
        default: ''
        
      windows-sdk-version4:
        required: false
        type: string
        default: ''
        
      fetch-depth:
        required: false
        type: number
        default: 0
        
      conventional-commits-publish-conditions:
        required: false
        type: boolean
        default: true
        
      project-path:
        required: false
        type: string
        default: ''
        
      additional-project-path:
        required: false
        type: string
        default: ''
        
      configuration:
        required: false
        type: string
        default: Release
        
      use-msbuild:
        required: false
        type: boolean
        default: false
        
      install-latest-msbuild:
        required: false
        type: boolean
        default: false
        
      vs-prerelease:
        required: false
        type: boolean
        default: true
        
      run-tests:
        required: false
        type: boolean
        default: true
        
      asset-path1:
        required: false
        type: string
        default: ''
        
      asset-name1:
        required: false
        type: string
        default: ''
        
      asset-content-type1:
        required: false
        type: string
        default: application/x-msi
        
      asset-path2:
        required: false
        type: string
        default: ''
        
      asset-name2:
        required: false
        type: string
        default: ''
        
      asset-content-type2:
        required: false
        type: string
        default: application/x-msi
        
      asset-path3:
        required: false
        type: string
        default: ''
        
      asset-name3:
        required: false
        type: string
        default: ''
        
      asset-content-type3:
        required: false
        type: string
        default: application/x-msi
        
      deploy-web-assembly-path:
        required: false
        type: string
        default: ''
        
      deploy-web-assembly-repo:
        required: false
        type: string
        default: ''
        
    secrets:
      nuget-key:
        required: false
        
      virustotal-key:
        required: false

      personal-token:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.os }}
    name: Build, test and publish
    env:
      DOTNET_NOLOGO: true
      CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS: 
        ${{ !inputs.conventional-commits-publish-conditions || 
        contains(join(github.event.commits.*.message), 'fix:') || 
        contains(join(github.event.commits.*.message), 'feat:') || 
        contains(join(github.event.commits.*.message), 'perf:') || 
        contains(join(github.event.commits.*.message), 'fix(') || 
        contains(join(github.event.commits.*.message), 'feat(') || 
        contains(join(github.event.commits.*.message), 'perf(') }}
      PUBLISH-TO-NUGET: ${{ !!secrets.nuget-key }}
      SCAN-BY-VIRUSTOTAL: ${{ !!secrets.virustotal-key }}
      IS-PERSONAL-TOKEN-AVAILABLE: ${{ !!secrets.personal-token }}
    
    steps:
    - name: Getting code
      uses: actions/checkout@v3
      with: 
        fetch-depth: ${{ inputs.fetch-depth }}
        
    - name: Generate build number using standard token
      if: inputs.generate-build-number &&
          env.IS-PERSONAL-TOKEN-AVAILABLE != 'true' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      id: build-number
      uses: einaregilsson/build-number@v3
      with:
        token: ${{ secrets.github_token }}
        
    - name: Generate build number using personal token
      if: inputs.generate-build-number &&
          env.IS-PERSONAL-TOKEN-AVAILABLE == 'true' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      uses: einaregilsson/build-number@v3
      with:
        token: ${{ secrets.personal-token }}
          
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        dotnet-quality: ${{ inputs.dotnet-quality }}

    - name: Install workloads
      if: inputs.workloads != ''
      run: dotnet workload install
        ${{ inputs.workloads }}
          
    - name: Setup additional .NET
      if: inputs.additional-dotnet-version != ''
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.additional-dotnet-version }}
        dotnet-quality: ${{ inputs.dotnet-quality }}

    - name: Download build tools
      if: inputs.install-latest-msbuild
      run: Invoke-webrequest
        -uri https://aka.ms/vs/17/pre/vs_buildtools.exe
        -OutFile vs_buildtools.exe
      shell: powershell

    - name: Install build tools
      if: inputs.install-latest-msbuild
      run: .\vs_buildtools.exe
        --wait
        --norestart
        --passive
        --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools"
        --includeOptional
        --includeRecommended
        --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools
        --add Microsoft.VisualStudio.Workload.MSBuildTools
        --add Microsoft.VisualStudio.Workload.NativeDesktop
        --add Microsoft.VisualStudio.Workload.NetCoreTools
      shell: cmd
      continue-on-error: true

    - name: Setup MSBuild
      if: inputs.use-msbuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-prerelease: ${{ inputs.vs-prerelease }}

    - name: Setup Windows SDK
      if: inputs.windows-sdk-version != '' &&
          inputs.windows-sdk-version != '16299'
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: ${{ inputs.windows-sdk-version }}

    - name: Setup Windows SDK
      if: inputs.windows-sdk-version2 != '' &&
          inputs.windows-sdk-version2 != '16299'
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: ${{ inputs.windows-sdk-version2 }}

    - name: Setup Windows SDK
      if: inputs.windows-sdk-version3 != '' &&
          inputs.windows-sdk-version3 != '16299'
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: ${{ inputs.windows-sdk-version3 }}

    - name: Setup Windows SDK
      if: inputs.windows-sdk-version4 != '' &&
          inputs.windows-sdk-version4 != '16299'
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: ${{ inputs.windows-sdk-version4 }}
      
    - name: Install Windows SDK 10.0.16299
      if: inputs.windows-sdk-version == '16299' ||
          inputs.windows-sdk-version2 == '16299' ||
          inputs.windows-sdk-version3 == '16299' ||
          inputs.windows-sdk-version4 == '16299'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://go.microsoft.com/fwlink/p/?linkid=864422 -OutFile winsdk.exe
        $startInfo = New-Object System.Diagnostics.ProcessStartInfo
        $startInfo.FileName = "winsdk.exe"
        $startInfo.Arguments = "/norestart /quiet"
        $process = New-Object System.Diagnostics.Process
        $process.StartInfo = $startInfo
        $process.Start()
        $process.WaitForExit() 

    - name: Setup JDK
      if: contains(inputs.workloads, 'android')
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Generate Release Notes on windows systems
      if: inputs.os == 'windows-latest' || 
          inputs.os == 'windows-2022'
      run: |
        echo 'PACKAGE_RELEASE_NOTES<<EOF' >> $env:GITHUB_ENV
        echo '⭐ Last 10 features:' >> $env:GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=feat >> $env:GITHUB_ENV
        echo '' >> $env:GITHUB_ENV
        echo '🐞 Last 10 bug fixes:' >> $env:GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=fix >> $env:GITHUB_ENV
        echo '' >> $env:GITHUB_ENV
        echo 'EOF' >> $env:GITHUB_ENV
        
    - name: Generate Release Notes on non-windows systems
      if: inputs.os != 'windows-latest' && 
          inputs.os != 'windows-2022'
      run: |
        echo 'PACKAGE_RELEASE_NOTES<<EOF' >> $GITHUB_ENV
        echo '⭐ Last 10 features:' >> $GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=feat >> $GITHUB_ENV
        echo '' >> $GITHUB_ENV
        echo '🐞 Last 10 bug fixes:' >> $GITHUB_ENV
        git log -10 --pretty=format:"- %s %cs" --grep=fix >> $GITHUB_ENV
        echo '' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    
    - name: Build using dotnet
      if: ${{ !inputs.use-msbuild }}
      run: dotnet build
        ${{ inputs.project-path }}
        --configuration ${{ inputs.configuration }}
        --nologo

    - name: Build using MSBuild
      if: inputs.use-msbuild
      run: msbuild
        ${{ inputs.project-path }}
        /property:Configuration=${{ inputs.configuration }}
        /restore

    - name: Run tests
      if: inputs.run-tests && !inputs.use-msbuild
      run: dotnet test
        ${{ inputs.project-path }}
        --configuration ${{ inputs.configuration }}
        --nologo
    
    - name: Build additional project using dotnet
      if: inputs.additional-project-path != '' && !inputs.use-msbuild
      run: dotnet build
        ${{ inputs.additional-project-path }}
        --configuration ${{ inputs.configuration }}
        --nologo

    - name: Build additional project using MSBuild
      if: inputs.additional-project-path != '' &&
          inputs.use-msbuild
      run: msbuild
        ${{ inputs.additional-project-path }}
        /property:Configuration=${{ inputs.configuration }}
        /restore

    - name: Run additional project tests
      if: inputs.additional-project-path != '' &&
          inputs.run-tests && !inputs.use-msbuild
      run: dotnet test
        ${{ inputs.additional-project-path }}
        --configuration ${{ inputs.configuration }}
        --nologo
        
    - name: Publish to NuGet
      if: env.PUBLISH-TO-NUGET == 'true' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      env:
        PUBLISH: ${{ steps.compute-conventional-commits-publish-conditions.outputs.publish }}
      run: dotnet nuget push
        src\**.nupkg
        --skip-duplicate
        --source https://api.nuget.org/v3/index.json
        --api-key ${{ secrets.nuget-key }}
        
    - name: VirusTotal Scan
      if: env.SCAN-BY-VIRUSTOTAL == 'true' &&
          inputs.asset-path1 != '' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      id: virustotal
      uses: crazy-max/ghaction-virustotal@v3
      with:
        vt_api_key: ${{ secrets.virustotal-key }}
        update_release_body: true
        files: |
          ${{ inputs.asset-path1 }}
          ${{ inputs.asset-path2 }}
          ${{ inputs.asset-path3 }}
        
    - name: Create Release
      if: env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      id: create_release
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          let body = `${{ env.PACKAGE_RELEASE_NOTES }}`
          body = body.concat(`\n\n<details>\n  <summary>🛡 VirusTotal analysis</summary>\n`)
          const json = '{"' + '${{ steps.virustotal.outputs.analysis }}'.replace(/ /g, '", "').replace(/=/g, '": "') + '"}'
          for ((key, value) in JSON.parse(json)) {
            body = body.concat(`\n  * [\`${key}\`](${value})`)
          }
          
          const result = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: 'build-number-${{ steps.build-number.outputs.build_number }}',
            name: 'Release ${{ steps.build-number.outputs.build_number }}',
            body: body,
            generate_release_notes: true,
          })
          
          return result.data.upload_url

    - name: Upload Asset 1
      if: inputs.asset-path1 != '' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.result }}
        asset_path: ${{ inputs.asset-path1 }}
        asset_name: ${{ inputs.asset-name1 }}
        asset_content_type: ${{ inputs.asset-content-type1 }}

    - name: Upload Asset 2
      if: inputs.asset-path2 != '' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.result }}
        asset_path: ${{ inputs.asset-path2 }}
        asset_name: ${{ inputs.asset-name2 }}
        asset_content_type: ${{ inputs.asset-content-type2 }}

    - name: Upload Asset 3
      if: inputs.asset-path3 != '' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.result }}
        asset_path: ${{ inputs.asset-path3 }}
        asset_name: ${{ inputs.asset-name3 }}
        asset_content_type: ${{ inputs.asset-content-type3 }}

    - name: Deploy WebAssembly to current repository GitHub Pages
      if: inputs.deploy-web-assembly-path != '' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true' &&
          inputs.deploy-web-assembly-repo == ''
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: gh-pages
        build_dir: ${{ inputs.deploy-web-assembly-path }}
        jekyll: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Deploy WebAssembly to other repository GitHub Pages
      if: inputs.deploy-web-assembly-path != '' &&
          env.CONVENTIONAL-COMMITS-PUBLISH-CONDITIONS == 'true' &&
          inputs.deploy-web-assembly-repo != ''
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: gh-pages
        build_dir: ${{ inputs.deploy-web-assembly-path }}
        repo: ${{ inputs.deploy-web-assembly-repo }}
        jekyll: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_PAT: ${{ secrets.personal-token }}
